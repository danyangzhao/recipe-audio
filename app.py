# app.py
from flask import Flask, request, jsonify, send_file, render_template
from scrape import scrape_recipe_page
from process_recipe import parse_and_structure_recipe
from tts import generate_audio_from_text  # or use the google TTS function

import os
import io
import time

app = Flask(__name__)

@app.route('/')
def index():
    """Serve the main page with the URL input form"""
    return render_template('index.html')

@app.route('/result')
def result():
    """Serve the result page that displays the recipe and audio controls"""
    return render_template('result.html')

@app.route('/extract-recipe', methods=['POST'])
def extract_recipe():
    """
    Expects JSON body: { "recipeUrl": "https://some.recipe.url" }
    Returns JSON: { "recipe": { "introduction": "...", "ingredients": [...], "instructions": [...] } }
    """
    data = request.get_json()
    recipe_url = data.get('recipeUrl')
    if not recipe_url:
        return jsonify({"error": "No recipeUrl provided"}), 400

    # 1. Scrape the webpage
    raw_text = scrape_recipe_page(recipe_url)

    # 2. Parse & structure with OpenAI
    structured_recipe = parse_and_structure_recipe(raw_text)

    return jsonify({"recipe": structured_recipe})


@app.route('/generate-audio', methods=['POST'])
def generate_audio():
    """
    Expects JSON body with the recipe data:
    {
      "introduction": "...",
      "ingredients": [...],
      "instructions": [...]
    }
    Returns an MP3 audio file generated by OpenAI's Text-to-Speech API.
    """
    try:
        recipe_data = request.get_json()
        print("Received recipe data:", recipe_data)  # Debug print
        
        if not recipe_data:
            return jsonify({"error": "No recipe data provided"}), 400

        # Create the text that we want to speak
        introduction = recipe_data.get("introduction", "")
        ingredients = recipe_data.get("ingredients", [])
        instructions = recipe_data.get("instructions", [])

        # Debug prints
        print("Introduction:", introduction)
        print("Ingredients:", ingredients)
        print("Instructions:", instructions)

        # Build a single text block for TTS
        tts_text = f"{introduction}\n\nIngredients:\n"
        for ing in ingredients:
            qty = ing.get("quantity", "")
            item = ing.get("item", "")
            tts_text += f" - {qty} of {item}\n"

        tts_text += "\nInstructions:\n"
        for idx, step in enumerate(instructions, start=1):
            tts_text += f"Step {idx}: {step}\n"

        print("Final TTS text:", tts_text)  # Debug print

        # Generate audio using OpenAI's TTS
        try:
            audio_data = generate_audio_from_text(tts_text)
        except Exception as e:
            return jsonify({"error": f"Text-to-speech generation failed: {str(e)}"}), 500

        # Serve as MP3 file download
        return send_file(
            io.BytesIO(audio_data),
            mimetype="audio/mpeg",
            as_attachment=True,
            download_name=f"recipe_{int(time.time())}.mp3"
        )

    except Exception as e:
        return jsonify({"error": f"Request processing failed: {str(e)}"}), 500

@app.route('/results')
def results():
    # Assuming recipe_data is stored in a session or passed as a parameter
    recipe_data = {
        "title": "Recipe Title",
        "description": "Recipe description...",
        "ingredients": ["ingredient 1", "ingredient 2", ...],
        "instructions": ["step 1", "step 2", ...],
        "notes": "Optional notes..."
    }
    return render_template('results.html', recipe=recipe_data)

if __name__ == '__main__':
    # For local dev only
    # In production, use a proper WSGI server (e.g., gunicorn)
    app.run(port=5000, debug=True)
